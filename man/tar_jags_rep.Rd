% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_jags_rep.R
\name{tar_jags_rep}
\alias{tar_jags_rep}
\title{Tidy output from multiple MCMCs per model.}
\usage{
tar_jags_rep(
  name,
  jags_files,
  parameters.to.save,
  data = quote(list()),
  batches = 1L,
  reps = 1L,
  output = c("summary", "draws", "dic"),
  variables = NULL,
  summaries = NULL,
  summary_args = NULL,
  combine = TRUE,
  n.cluster = 1,
  n.chains = 3,
  n.iter = 2000,
  n.burnin = as.integer(n.iter/2),
  n.thin = 1,
  jags.module = c("glm", "dic"),
  inits = NULL,
  RNGname = c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper",
    "Mersenne-Twister"),
  jags.seed = 1,
  stdout = NULL,
  stderr = NULL,
  progress.bar = "text",
  refresh = 0,
  tidy_eval = targets::tar_option_get("tidy_eval"),
  packages = targets::tar_option_get("packages"),
  library = targets::tar_option_get("library"),
  format = "qs",
  format_df = "fst_tbl",
  repository = targets::tar_option_get("repository"),
  error = targets::tar_option_get("error"),
  memory = targets::tar_option_get("memory"),
  garbage_collection = targets::tar_option_get("garbage_collection"),
  deployment = targets::tar_option_get("deployment"),
  priority = targets::tar_option_get("priority"),
  resources = targets::tar_option_get("resources"),
  storage = targets::tar_option_get("storage"),
  retrieval = targets::tar_option_get("retrieval"),
  cue = targets::tar_option_get("cue")
)
}
\arguments{
\item{name}{Symbol, base name for the collection of targets.
Serves as a prefix for target names.}

\item{jags_files}{Character vector of JAGS model files. If you
supply multiple files, each model will run on the one shared dataset
generated by the code in \code{data}. If you supply an unnamed vector,
\code{tools::file_path_sans_ext(basename(jags_files))} will be used
as target name suffixes. If \code{jags_files} is a named vector,
the suffixed will come from \code{names(jags_files)}.}

\item{parameters.to.save}{Model parameters to save, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{data}{Code to generate the \code{data} list for the JAGS model.
Optionally include a \code{.join_data} element to join parts of the data
to correspondingly named parameters in the summary output.
See the vignettes for details.}

\item{batches}{Number of batches. Each batch runs a model \code{reps} times.}

\item{reps}{Number of replications per batch. Ideally, each rep
should produce its own random dataset using the code
supplied to \code{data}.}

\item{output}{Character of length 1 denoting the type of output \code{tibble}
to return: \code{"draws"} for MCMC samples (which could take up a lot of space)
\code{"summary"} for lightweight posterior summary statistics,
and \code{"dic"} for the overall deviance information criterion
and effective number of parameters}

\item{variables}{Character vector of model parameter names.
The output posterior summaries are restricted to these variables.}

\item{summaries}{List of summary functions passed to \code{...} in
\code{posterior::summarize_draws()} through \verb{$summary()}
on the \code{CmdStanFit} object.}

\item{summary_args}{List of summary function arguments passed to
\code{.args} in \code{posterior::summarize_draws()} through \verb{$summary()}
on the \code{CmdStanFit} object.}

\item{combine}{Logical, whether to create a target to
combine all the model results
into a single data frame downstream. Convenient, but
duplicates data.}

\item{n.cluster}{Number of parallel processes, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{n.chains}{Number of MCMC chains, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{n.iter}{Number if iterations (including warmup), passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{n.burnin}{Number of warmup iterations, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{n.thin}{Thinning interval, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{jags.module}{Character vector of JAGS modules to load, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{inits}{Initial values of model parameters, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{RNGname}{Choice of random number generator, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{jags.seed}{Seeds to apply to JAGS, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{stdout}{Character of length 1, file path to write the stdout stream
of the model when it runs. Set to \code{NULL} to print to the console.
Set to \code{R.utils::nullfile()} to suppress stdout.
Does not apply to messages, warnings, or errors.}

\item{stderr}{Character of length 1, file path to write the stderr stream
of the model when it runs. Set to \code{NULL} to print to the console.
Set to \code{R.utils::nullfile()} to suppress stderr.
Does not apply to messages, warnings, or errors.}

\item{progress.bar}{Type of progress bar, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{refresh}{Frequency for refreshing the progress bar, passed to
\code{R2jags::jags()} or \code{R2jags::jags.parallel()}.
See the argument documentation of the
\code{R2jags::jags()} and \code{R2jags::jags.parallel()} help files for details.}

\item{tidy_eval}{Logical, whether to enable tidy evaluation
when interpreting \code{command} and \code{pattern}. If \code{TRUE}, you can use the
"bang-bang" operator \verb{!!} to programmatically insert
the values of global objects.}

\item{packages}{Character vector of packages to load right before
the target builds or the output data is reloaded for
downstream targets. Use \code{tar_option_set()} to set packages
globally for all subsequent targets you define.}

\item{library}{Character vector of library paths to try
when loading \code{packages}.}

\item{format}{Character of length 1, storage format of the data frames
of posterior summaries and other data frames returned by targets.
We recommend efficient data frame formats
such as \code{"feather"} or \code{"aws_parquet"}. For more on storage formats,
see the help file of \code{targets::tar_target()}.}

\item{format_df}{Character of length 1, storage format of the data frame
targets such as posterior draws. We recommend efficient data frame formats
such as \code{"feather"} or \code{"aws_parquet"}. For more on storage formats,
see the help file of \code{targets::tar_target()}.}

\item{repository}{Character of length 1, remote repository for target
storage. Choices:
\itemize{
\item \code{"local"}: file system of the local machine.
\item \code{"aws"}: Amazon Web Services (AWS) S3 bucket. Can be configured
with a non-AWS S3 bucket using the \code{endpoint} argument of
\code{\link[targets:tar_resources_aws]{tar_resources_aws()}}, but versioning capabilities may be lost
in doing so.
See the cloud storage section of
\url{https://books.ropensci.org/targets/data.html}
for details for instructions.
\item \code{"gcp"}: Google Cloud Platform storage bucket.
See the cloud storage section of
\url{https://books.ropensci.org/targets/data.html}
for details for instructions.
}}

\item{error}{Character of length 1, what to do if the target
stops and throws an error. Options:
\itemize{
\item \code{"stop"}: the whole pipeline stops and throws an error.
\item \code{"continue"}: the whole pipeline keeps going.
\item \code{"abridge"}: any currently running targets keep running,
but no new targets launch after that.
(Visit \url{https://books.ropensci.org/targets/debugging.html}
to learn how to debug targets using saved workspaces.)
\item \code{"null"}: The errored target continues and returns \code{NULL}.
The data hash is deliberately wrong so the target is not
up to date for the next run of the pipeline.
}}

\item{memory}{Character of length 1, memory strategy.
If \code{"persistent"}, the target stays in memory
until the end of the pipeline (unless \code{storage} is \code{"worker"},
in which case \code{targets} unloads the value from memory
right after storing it in order to avoid sending
copious data over a network).
If \code{"transient"}, the target gets unloaded
after every new target completes.
Either way, the target gets automatically loaded into memory
whenever another target needs the value.
For cloud-based dynamic files such as \code{format = "aws_file"},
this memory strategy applies to
temporary local copies of the file in \verb{_targets/scratch/"}:
\code{"persistent"} means they remain until the end of the pipeline,
and \code{"transient"} means they get deleted from the file system
as soon as possible. The former conserves bandwidth,
and the latter conserves local storage.}

\item{garbage_collection}{Logical, whether to run \code{base::gc()}
just before the target runs.}

\item{deployment}{Character of length 1, only relevant to
\code{\link[targets:tar_make_clustermq]{tar_make_clustermq()}} and \code{\link[targets:tar_make_future]{tar_make_future()}}. If \code{"worker"},
the target builds on a parallel worker. If \code{"main"},
the target builds on the host machine / process managing the pipeline.}

\item{priority}{Numeric of length 1 between 0 and 1. Controls which
targets get deployed first when multiple competing targets are ready
simultaneously. Targets with priorities closer to 1 get built earlier
(and polled earlier in \code{\link[targets:tar_make_future]{tar_make_future()}}).}

\item{resources}{Object returned by \code{tar_resources()}
with optional settings for high-performance computing
functionality, alternative data storage formats,
and other optional capabilities of \code{targets}.
See \code{tar_resources()} for details.}

\item{storage}{Character of length 1, only relevant to
\code{\link[targets:tar_make_clustermq]{tar_make_clustermq()}} and \code{\link[targets:tar_make_future]{tar_make_future()}}.
Must be one of the following values:
\itemize{
\item \code{"main"}: the target's return value is sent back to the
host machine and saved/uploaded locally.
\item \code{"worker"}: the worker saves/uploads the value.
\item \code{"none"}: almost never recommended. It is only for
niche situations, e.g. the data needs to be loaded
explicitly from another language. If you do use it,
then the return value of the target is totally ignored
when the target ends, but
each downstream target still attempts to load the data file
(except when \code{retrieval = "none"}).

If you select \code{storage = "none"}, then
the return value of the target's command is ignored,
and the data is not saved automatically.
As with dynamic files (\code{format = "file"} or \code{"aws_file"}) it is the
responsibility of the user to write to
\code{\link[targets:tar_path]{tar_path()}} from inside the target.
An example target
could look something like
tar_target(x,
{saveRDS("value", tar_path(create_dir = TRUE)); "ignored"},
storage = "none")`.

The distinguishing feature of \code{storage = "none"}
(as opposed to \code{format = "file"} or \code{"aws_file"})
is that in the general case,
downstream targets will automatically try to load the data
from the data store as a dependency. As a corollary, \code{storage = "none"}
is completely unnecessary if \code{format} is \code{"file"} or \code{"aws_file"}.
}}

\item{retrieval}{Character of length 1, only relevant to
\code{\link[targets:tar_make_clustermq]{tar_make_clustermq()}} and \code{\link[targets:tar_make_future]{tar_make_future()}}.
Must be one of the following values:
\itemize{
\item \code{"main"}: the target's dependencies are loaded on the host machine
and sent to the worker before the target builds.
\item \code{"worker"}: the worker loads the targets dependencies.
\item \code{"none"}: the dependencies are not loaded at all.
This choice is almost never recommended. It is only for
niche situations, e.g. the data needs to be loaded
explicitly from another language.
}}

\item{cue}{An optional object from \code{tar_cue()} to customize the
rules that decide whether the target is up to date.}
}
\value{
\code{tar_jags_rep(name = x, jags_files = "y.jags")}
returns a list of \code{targets::tar_target()} objects:
\itemize{
\item \code{x_file_y}: reproducibly track the jags model file.
\item \code{x_lines_y}: contents of the jags model file.
\item \code{x_data}: dynamic branching target with simulated datasets.
\item \code{x_y}: dynamic branching target with tidy data frames of MCMC summaries.
\item \code{x}: combine all the model-specific summary targets into
a single data frame with columns to distinguish among the models.
Suppressed if \code{combine} is \code{FALSE}.
}
}
\description{
Internal function. Users should not invoke directly.
}
\keyword{internal}
